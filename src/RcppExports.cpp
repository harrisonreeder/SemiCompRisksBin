// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Logitmcmc_PG
Rcpp::List Logitmcmc_PG(const arma::vec& y, const arma::mat& Xmat, const arma::vec& m0, const arma::mat& P0, const arma::vec& start_vec, int n_burnin, int n_sample, int thin);
RcppExport SEXP _SemiCompRisksBin_Logitmcmc_PG(SEXP ySEXP, SEXP XmatSEXP, SEXP m0SEXP, SEXP P0SEXP, SEXP start_vecSEXP, SEXP n_burninSEXP, SEXP n_sampleSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P0(P0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type start_vec(start_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< int >::type n_sample(n_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(Logitmcmc_PG(y, Xmat, m0, P0, start_vec, n_burnin, n_sample, thin));
    return rcpp_result_gen;
END_RCPP
}
// rpg1z_devroye
double rpg1z_devroye(double z);
RcppExport SEXP _SemiCompRisksBin_rpg1z_devroye(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(rpg1z_devroye(z));
    return rcpp_result_gen;
END_RCPP
}
// WeibUnimcmc
Rcpp::List WeibUnimcmc(const arma::vec& y, const arma::uvec& delta, const arma::mat& Xmat, const arma::vec& hyper_vec, const arma::vec& tuning_vec, const arma::vec& start_vec, int n_burnin, int n_sample, int thin);
RcppExport SEXP _SemiCompRisksBin_WeibUnimcmc(SEXP ySEXP, SEXP deltaSEXP, SEXP XmatSEXP, SEXP hyper_vecSEXP, SEXP tuning_vecSEXP, SEXP start_vecSEXP, SEXP n_burninSEXP, SEXP n_sampleSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hyper_vec(hyper_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tuning_vec(tuning_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type start_vec(start_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< int >::type n_sample(n_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(WeibUnimcmc(y, delta, Xmat, hyper_vec, tuning_vec, start_vec, n_burnin, n_sample, thin));
    return rcpp_result_gen;
END_RCPP
}
// WeibSCRmcmc
void WeibSCRmcmc(const arma::vec& y1, const arma::vec& y_sm, const arma::uvec& delta1, const arma::uvec& delta1noD, const arma::uvec& delta_cr, const arma::uvec& delta_sm, const arma::mat& Xmat1, const arma::mat& Xmat2, const arma::mat& Xmat3, const arma::vec& hyper_vec, const arma::vec& tuning_vec, const arma::vec& start_vec, arma::vec& sample_alpha1, arma::vec& sample_alpha2, arma::vec& sample_alpha3, arma::vec& sample_kappa1, arma::vec& sample_kappa2, arma::vec& sample_kappa3, arma::mat& sample_beta1, arma::mat& sample_beta2, arma::mat& sample_beta3, arma::mat& sample_frail, arma::vec& sample_theta, arma::vec& accept_base, arma::vec& accept_frail, arma::vec& accept_beta1, arma::vec& accept_beta2, arma::vec& accept_beta3, arma::vec& LH_marg_mean_vec, arma::vec& invLH_marg_mean_vec, arma::vec& sample_logLH_marg, arma::mat& sample_logLHi_marg, arma::vec& LH_mean_vec, arma::vec& invLH_mean_vec, arma::vec& sample_logLH, arma::mat& sample_logLHi, arma::vec& move_vec, int n_burnin, int n_sample, int thin, int frail_ind, int nGam_save, int nlogLHi_save, const arma::vec& gh_nodes, const arma::vec& gh_weights);
RcppExport SEXP _SemiCompRisksBin_WeibSCRmcmc(SEXP y1SEXP, SEXP y_smSEXP, SEXP delta1SEXP, SEXP delta1noDSEXP, SEXP delta_crSEXP, SEXP delta_smSEXP, SEXP Xmat1SEXP, SEXP Xmat2SEXP, SEXP Xmat3SEXP, SEXP hyper_vecSEXP, SEXP tuning_vecSEXP, SEXP start_vecSEXP, SEXP sample_alpha1SEXP, SEXP sample_alpha2SEXP, SEXP sample_alpha3SEXP, SEXP sample_kappa1SEXP, SEXP sample_kappa2SEXP, SEXP sample_kappa3SEXP, SEXP sample_beta1SEXP, SEXP sample_beta2SEXP, SEXP sample_beta3SEXP, SEXP sample_frailSEXP, SEXP sample_thetaSEXP, SEXP accept_baseSEXP, SEXP accept_frailSEXP, SEXP accept_beta1SEXP, SEXP accept_beta2SEXP, SEXP accept_beta3SEXP, SEXP LH_marg_mean_vecSEXP, SEXP invLH_marg_mean_vecSEXP, SEXP sample_logLH_margSEXP, SEXP sample_logLHi_margSEXP, SEXP LH_mean_vecSEXP, SEXP invLH_mean_vecSEXP, SEXP sample_logLHSEXP, SEXP sample_logLHiSEXP, SEXP move_vecSEXP, SEXP n_burninSEXP, SEXP n_sampleSEXP, SEXP thinSEXP, SEXP frail_indSEXP, SEXP nGam_saveSEXP, SEXP nlogLHi_saveSEXP, SEXP gh_nodesSEXP, SEXP gh_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_sm(y_smSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta1noD(delta1noDSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta_cr(delta_crSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta_sm(delta_smSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat1(Xmat1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat2(Xmat2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat3(Xmat3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hyper_vec(hyper_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tuning_vec(tuning_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type start_vec(start_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sample_alpha1(sample_alpha1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sample_alpha2(sample_alpha2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sample_alpha3(sample_alpha3SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sample_kappa1(sample_kappa1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sample_kappa2(sample_kappa2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sample_kappa3(sample_kappa3SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sample_beta1(sample_beta1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sample_beta2(sample_beta2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sample_beta3(sample_beta3SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sample_frail(sample_frailSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sample_theta(sample_thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type accept_base(accept_baseSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type accept_frail(accept_frailSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type accept_beta1(accept_beta1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type accept_beta2(accept_beta2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type accept_beta3(accept_beta3SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type LH_marg_mean_vec(LH_marg_mean_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type invLH_marg_mean_vec(invLH_marg_mean_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sample_logLH_marg(sample_logLH_margSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sample_logLHi_marg(sample_logLHi_margSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type LH_mean_vec(LH_mean_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type invLH_mean_vec(invLH_mean_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sample_logLH(sample_logLHSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sample_logLHi(sample_logLHiSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type move_vec(move_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< int >::type n_sample(n_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type frail_ind(frail_indSEXP);
    Rcpp::traits::input_parameter< int >::type nGam_save(nGam_saveSEXP);
    Rcpp::traits::input_parameter< int >::type nlogLHi_save(nlogLHi_saveSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gh_nodes(gh_nodesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gh_weights(gh_weightsSEXP);
    WeibSCRmcmc(y1, y_sm, delta1, delta1noD, delta_cr, delta_sm, Xmat1, Xmat2, Xmat3, hyper_vec, tuning_vec, start_vec, sample_alpha1, sample_alpha2, sample_alpha3, sample_kappa1, sample_kappa2, sample_kappa3, sample_beta1, sample_beta2, sample_beta3, sample_frail, sample_theta, accept_base, accept_frail, accept_beta1, accept_beta2, accept_beta3, LH_marg_mean_vec, invLH_marg_mean_vec, sample_logLH_marg, sample_logLHi_marg, LH_mean_vec, invLH_mean_vec, sample_logLH, sample_logLHi, move_vec, n_burnin, n_sample, thin, frail_ind, nGam_save, nlogLHi_save, gh_nodes, gh_weights);
    return R_NilValue;
END_RCPP
}
// WeibSCRlogitmcmc
void WeibSCRlogitmcmc(const arma::vec& y1, const arma::vec& y_sm, const arma::uvec& delta1, const arma::uvec& delta1noD, const arma::uvec& delta_cr, const arma::uvec& delta_sm, const arma::uvec& delta1D_sub, const arma::mat& Xmat1, const arma::mat& Xmat2, const arma::mat& Xmat3, const arma::mat& XmatD, const arma::vec& hyper_vec, const arma::vec& tuning_vec, const arma::vec& start_vec, arma::vec& sample_alpha1, arma::vec& sample_alpha2, arma::vec& sample_alpha3, arma::vec& sample_kappa1, arma::vec& sample_kappa2, arma::vec& sample_kappa3, arma::mat& sample_beta1, arma::mat& sample_beta2, arma::mat& sample_beta3, arma::mat& sample_betaD, arma::mat& sample_frail, arma::vec& sample_theta, arma::vec& accept_base, arma::vec& accept_frail, arma::vec& accept_beta1, arma::vec& accept_beta2, arma::vec& accept_beta3, arma::vec& LH_marg_mean_vec, arma::vec& invLH_marg_mean_vec, arma::vec& sample_logLH_marg, arma::mat& sample_logLHi_marg, arma::vec& LH_mean_vec, arma::vec& invLH_mean_vec, arma::vec& sample_logLH, arma::mat& sample_logLHi, arma::vec& move_vec, int n_burnin, int n_sample, int thin, int frail_ind, int nGam_save, int nlogLHi_save, const arma::vec& gh_nodes, const arma::vec& gh_weights);
RcppExport SEXP _SemiCompRisksBin_WeibSCRlogitmcmc(SEXP y1SEXP, SEXP y_smSEXP, SEXP delta1SEXP, SEXP delta1noDSEXP, SEXP delta_crSEXP, SEXP delta_smSEXP, SEXP delta1D_subSEXP, SEXP Xmat1SEXP, SEXP Xmat2SEXP, SEXP Xmat3SEXP, SEXP XmatDSEXP, SEXP hyper_vecSEXP, SEXP tuning_vecSEXP, SEXP start_vecSEXP, SEXP sample_alpha1SEXP, SEXP sample_alpha2SEXP, SEXP sample_alpha3SEXP, SEXP sample_kappa1SEXP, SEXP sample_kappa2SEXP, SEXP sample_kappa3SEXP, SEXP sample_beta1SEXP, SEXP sample_beta2SEXP, SEXP sample_beta3SEXP, SEXP sample_betaDSEXP, SEXP sample_frailSEXP, SEXP sample_thetaSEXP, SEXP accept_baseSEXP, SEXP accept_frailSEXP, SEXP accept_beta1SEXP, SEXP accept_beta2SEXP, SEXP accept_beta3SEXP, SEXP LH_marg_mean_vecSEXP, SEXP invLH_marg_mean_vecSEXP, SEXP sample_logLH_margSEXP, SEXP sample_logLHi_margSEXP, SEXP LH_mean_vecSEXP, SEXP invLH_mean_vecSEXP, SEXP sample_logLHSEXP, SEXP sample_logLHiSEXP, SEXP move_vecSEXP, SEXP n_burninSEXP, SEXP n_sampleSEXP, SEXP thinSEXP, SEXP frail_indSEXP, SEXP nGam_saveSEXP, SEXP nlogLHi_saveSEXP, SEXP gh_nodesSEXP, SEXP gh_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_sm(y_smSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta1noD(delta1noDSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta_cr(delta_crSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta_sm(delta_smSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta1D_sub(delta1D_subSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat1(Xmat1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat2(Xmat2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat3(Xmat3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XmatD(XmatDSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hyper_vec(hyper_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tuning_vec(tuning_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type start_vec(start_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sample_alpha1(sample_alpha1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sample_alpha2(sample_alpha2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sample_alpha3(sample_alpha3SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sample_kappa1(sample_kappa1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sample_kappa2(sample_kappa2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sample_kappa3(sample_kappa3SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sample_beta1(sample_beta1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sample_beta2(sample_beta2SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sample_beta3(sample_beta3SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sample_betaD(sample_betaDSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sample_frail(sample_frailSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sample_theta(sample_thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type accept_base(accept_baseSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type accept_frail(accept_frailSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type accept_beta1(accept_beta1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type accept_beta2(accept_beta2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type accept_beta3(accept_beta3SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type LH_marg_mean_vec(LH_marg_mean_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type invLH_marg_mean_vec(invLH_marg_mean_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sample_logLH_marg(sample_logLH_margSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sample_logLHi_marg(sample_logLHi_margSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type LH_mean_vec(LH_mean_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type invLH_mean_vec(invLH_mean_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type sample_logLH(sample_logLHSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type sample_logLHi(sample_logLHiSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type move_vec(move_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< int >::type n_sample(n_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type frail_ind(frail_indSEXP);
    Rcpp::traits::input_parameter< int >::type nGam_save(nGam_saveSEXP);
    Rcpp::traits::input_parameter< int >::type nlogLHi_save(nlogLHi_saveSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gh_nodes(gh_nodesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gh_weights(gh_weightsSEXP);
    WeibSCRlogitmcmc(y1, y_sm, delta1, delta1noD, delta_cr, delta_sm, delta1D_sub, Xmat1, Xmat2, Xmat3, XmatD, hyper_vec, tuning_vec, start_vec, sample_alpha1, sample_alpha2, sample_alpha3, sample_kappa1, sample_kappa2, sample_kappa3, sample_beta1, sample_beta2, sample_beta3, sample_betaD, sample_frail, sample_theta, accept_base, accept_frail, accept_beta1, accept_beta2, accept_beta3, LH_marg_mean_vec, invLH_marg_mean_vec, sample_logLH_marg, sample_logLHi_marg, LH_mean_vec, invLH_mean_vec, sample_logLH, sample_logLHi, move_vec, n_burnin, n_sample, thin, frail_ind, nGam_save, nlogLHi_save, gh_nodes, gh_weights);
    return R_NilValue;
END_RCPP
}
// WeibSCRlogitmcmc2
Rcpp::List WeibSCRlogitmcmc2(const arma::vec& y1, const arma::vec& y_sm, const arma::uvec& delta1, const arma::uvec& delta1noD, const arma::uvec& delta_cr, const arma::uvec& delta_sm, const arma::uvec& delta1D_sub, const arma::mat& Xmat1, const arma::mat& Xmat2, const arma::mat& Xmat3, arma::mat& XmatD, const arma::vec& hyper_vec, const arma::vec& tuning_vec, const arma::vec& start_vec, int n_burnin, int n_sample, int thin);
RcppExport SEXP _SemiCompRisksBin_WeibSCRlogitmcmc2(SEXP y1SEXP, SEXP y_smSEXP, SEXP delta1SEXP, SEXP delta1noDSEXP, SEXP delta_crSEXP, SEXP delta_smSEXP, SEXP delta1D_subSEXP, SEXP Xmat1SEXP, SEXP Xmat2SEXP, SEXP Xmat3SEXP, SEXP XmatDSEXP, SEXP hyper_vecSEXP, SEXP tuning_vecSEXP, SEXP start_vecSEXP, SEXP n_burninSEXP, SEXP n_sampleSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_sm(y_smSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta1noD(delta1noDSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta_cr(delta_crSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta_sm(delta_smSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta1D_sub(delta1D_subSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat1(Xmat1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat2(Xmat2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat3(Xmat3SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type XmatD(XmatDSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hyper_vec(hyper_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tuning_vec(tuning_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type start_vec(start_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< int >::type n_sample(n_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(WeibSCRlogitmcmc2(y1, y_sm, delta1, delta1noD, delta_cr, delta_sm, delta1D_sub, Xmat1, Xmat2, Xmat3, XmatD, hyper_vec, tuning_vec, start_vec, n_burnin, n_sample, thin));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SemiCompRisksBin_Logitmcmc_PG", (DL_FUNC) &_SemiCompRisksBin_Logitmcmc_PG, 8},
    {"_SemiCompRisksBin_rpg1z_devroye", (DL_FUNC) &_SemiCompRisksBin_rpg1z_devroye, 1},
    {"_SemiCompRisksBin_WeibUnimcmc", (DL_FUNC) &_SemiCompRisksBin_WeibUnimcmc, 9},
    {"_SemiCompRisksBin_WeibSCRmcmc", (DL_FUNC) &_SemiCompRisksBin_WeibSCRmcmc, 45},
    {"_SemiCompRisksBin_WeibSCRlogitmcmc", (DL_FUNC) &_SemiCompRisksBin_WeibSCRlogitmcmc, 48},
    {"_SemiCompRisksBin_WeibSCRlogitmcmc2", (DL_FUNC) &_SemiCompRisksBin_WeibSCRlogitmcmc2, 17},
    {NULL, NULL, 0}
};

RcppExport void R_init_SemiCompRisksBin(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
