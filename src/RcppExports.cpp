// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// Logitmcmc_PG
Rcpp::List Logitmcmc_PG(const arma::vec& y, const arma::mat& Xmat, const arma::vec& m0, const arma::mat& P0, const arma::vec& start_vec, int n_burnin, int n_sample, int thin);
RcppExport SEXP _SemiCompRisksBin_Logitmcmc_PG(SEXP ySEXP, SEXP XmatSEXP, SEXP m0SEXP, SEXP P0SEXP, SEXP start_vecSEXP, SEXP n_burninSEXP, SEXP n_sampleSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type P0(P0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type start_vec(start_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< int >::type n_sample(n_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(Logitmcmc_PG(y, Xmat, m0, P0, start_vec, n_burnin, n_sample, thin));
    return rcpp_result_gen;
END_RCPP
}
// rpg1z_devroye
double rpg1z_devroye(double z);
RcppExport SEXP _SemiCompRisksBin_rpg1z_devroye(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(rpg1z_devroye(z));
    return rcpp_result_gen;
END_RCPP
}
// WeibUnimcmc
Rcpp::List WeibUnimcmc(const arma::vec& y, const arma::uvec& delta, const arma::mat& Xmat, const arma::vec& hyper_vec, const arma::vec& tuning_vec, const arma::vec& start_vec, int n_burnin, int n_sample, int thin);
RcppExport SEXP _SemiCompRisksBin_WeibUnimcmc(SEXP ySEXP, SEXP deltaSEXP, SEXP XmatSEXP, SEXP hyper_vecSEXP, SEXP tuning_vecSEXP, SEXP start_vecSEXP, SEXP n_burninSEXP, SEXP n_sampleSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hyper_vec(hyper_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tuning_vec(tuning_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type start_vec(start_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< int >::type n_sample(n_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(WeibUnimcmc(y, delta, Xmat, hyper_vec, tuning_vec, start_vec, n_burnin, n_sample, thin));
    return rcpp_result_gen;
END_RCPP
}
// WeibSCRmcmc
Rcpp::List WeibSCRmcmc(const arma::vec& y1, const arma::vec& y_sm, const arma::uvec& delta1, const arma::uvec& delta1noD, const arma::uvec& delta_cr, const arma::uvec& delta_sm, const arma::mat& Xmat1, const arma::mat& Xmat2, const arma::mat& Xmat3, const arma::vec& hyper_vec, const arma::vec& tuning_vec, const arma::vec& start_vec, int n_burnin, int n_sample, int thin);
RcppExport SEXP _SemiCompRisksBin_WeibSCRmcmc(SEXP y1SEXP, SEXP y_smSEXP, SEXP delta1SEXP, SEXP delta1noDSEXP, SEXP delta_crSEXP, SEXP delta_smSEXP, SEXP Xmat1SEXP, SEXP Xmat2SEXP, SEXP Xmat3SEXP, SEXP hyper_vecSEXP, SEXP tuning_vecSEXP, SEXP start_vecSEXP, SEXP n_burninSEXP, SEXP n_sampleSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_sm(y_smSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta1noD(delta1noDSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta_cr(delta_crSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta_sm(delta_smSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat1(Xmat1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat2(Xmat2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat3(Xmat3SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hyper_vec(hyper_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tuning_vec(tuning_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type start_vec(start_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< int >::type n_sample(n_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(WeibSCRmcmc(y1, y_sm, delta1, delta1noD, delta_cr, delta_sm, Xmat1, Xmat2, Xmat3, hyper_vec, tuning_vec, start_vec, n_burnin, n_sample, thin));
    return rcpp_result_gen;
END_RCPP
}
// WeibSCRlogitmcmc
Rcpp::List WeibSCRlogitmcmc(const arma::vec& y1, const arma::vec& y_sm, const arma::uvec& delta1, const arma::uvec& delta1noD, const arma::uvec& delta_cr, const arma::uvec& delta_sm, const arma::uvec& delta1D_sub, const arma::mat& Xmat1, const arma::mat& Xmat2, const arma::mat& Xmat3, const arma::mat& XmatD, const arma::vec& hyper_vec, const arma::vec& tuning_vec, const arma::vec& start_vec, int n_burnin, int n_sample, int thin);
RcppExport SEXP _SemiCompRisksBin_WeibSCRlogitmcmc(SEXP y1SEXP, SEXP y_smSEXP, SEXP delta1SEXP, SEXP delta1noDSEXP, SEXP delta_crSEXP, SEXP delta_smSEXP, SEXP delta1D_subSEXP, SEXP Xmat1SEXP, SEXP Xmat2SEXP, SEXP Xmat3SEXP, SEXP XmatDSEXP, SEXP hyper_vecSEXP, SEXP tuning_vecSEXP, SEXP start_vecSEXP, SEXP n_burninSEXP, SEXP n_sampleSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_sm(y_smSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta1noD(delta1noDSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta_cr(delta_crSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta_sm(delta_smSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta1D_sub(delta1D_subSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat1(Xmat1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat2(Xmat2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat3(Xmat3SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type XmatD(XmatDSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hyper_vec(hyper_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tuning_vec(tuning_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type start_vec(start_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< int >::type n_sample(n_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(WeibSCRlogitmcmc(y1, y_sm, delta1, delta1noD, delta_cr, delta_sm, delta1D_sub, Xmat1, Xmat2, Xmat3, XmatD, hyper_vec, tuning_vec, start_vec, n_burnin, n_sample, thin));
    return rcpp_result_gen;
END_RCPP
}
// WeibSCRlogitmcmc2
Rcpp::List WeibSCRlogitmcmc2(const arma::vec& y1, const arma::vec& y_sm, const arma::uvec& delta1, const arma::uvec& delta1noD, const arma::uvec& delta_cr, const arma::uvec& delta_sm, const arma::uvec& delta1D_sub, const arma::mat& Xmat1, const arma::mat& Xmat2, const arma::mat& Xmat3, arma::mat& XmatD, const arma::vec& hyper_vec, const arma::vec& tuning_vec, const arma::vec& start_vec, int n_burnin, int n_sample, int thin);
RcppExport SEXP _SemiCompRisksBin_WeibSCRlogitmcmc2(SEXP y1SEXP, SEXP y_smSEXP, SEXP delta1SEXP, SEXP delta1noDSEXP, SEXP delta_crSEXP, SEXP delta_smSEXP, SEXP delta1D_subSEXP, SEXP Xmat1SEXP, SEXP Xmat2SEXP, SEXP Xmat3SEXP, SEXP XmatDSEXP, SEXP hyper_vecSEXP, SEXP tuning_vecSEXP, SEXP start_vecSEXP, SEXP n_burninSEXP, SEXP n_sampleSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_sm(y_smSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta1noD(delta1noDSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta_cr(delta_crSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta_sm(delta_smSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type delta1D_sub(delta1D_subSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat1(Xmat1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat2(Xmat2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Xmat3(Xmat3SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type XmatD(XmatDSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hyper_vec(hyper_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tuning_vec(tuning_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type start_vec(start_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_burnin(n_burninSEXP);
    Rcpp::traits::input_parameter< int >::type n_sample(n_sampleSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(WeibSCRlogitmcmc2(y1, y_sm, delta1, delta1noD, delta_cr, delta_sm, delta1D_sub, Xmat1, Xmat2, Xmat3, XmatD, hyper_vec, tuning_vec, start_vec, n_burnin, n_sample, thin));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SemiCompRisksBin_Logitmcmc_PG", (DL_FUNC) &_SemiCompRisksBin_Logitmcmc_PG, 8},
    {"_SemiCompRisksBin_rpg1z_devroye", (DL_FUNC) &_SemiCompRisksBin_rpg1z_devroye, 1},
    {"_SemiCompRisksBin_WeibUnimcmc", (DL_FUNC) &_SemiCompRisksBin_WeibUnimcmc, 9},
    {"_SemiCompRisksBin_WeibSCRmcmc", (DL_FUNC) &_SemiCompRisksBin_WeibSCRmcmc, 15},
    {"_SemiCompRisksBin_WeibSCRlogitmcmc", (DL_FUNC) &_SemiCompRisksBin_WeibSCRlogitmcmc, 17},
    {"_SemiCompRisksBin_WeibSCRlogitmcmc2", (DL_FUNC) &_SemiCompRisksBin_WeibSCRlogitmcmc2, 17},
    {NULL, NULL, 0}
};

RcppExport void R_init_SemiCompRisksBin(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
